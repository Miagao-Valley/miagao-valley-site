---
import Icon from "./Icon.astro";
import type { iconPaths } from "./IconPaths";
import CallToAction from "./CallToAction.astro";

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
	{ label: "Home", href: "/" },
	{ label: "Projects", href: "/projects/" },
	{ label: "About", href: "/about/" },
];
---

<nav data-pagefind-ignore>
	<div class="menu-header">
		<a href="/" class="site-title">
			<img id="logo" width="50" height="50" src="/assets/logo.png" />
		</a>
		<menu-button>
			<template>
				<button class="menu-button" aria-expanded="false">
					<span class="sr-only">Menu</span>
					<Icon icon="list" />
				</button>
			</template>
		</menu-button>
	</div>
	<noscript>
		<ul class="nav-items">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a
							aria-current={Astro.url.pathname === href}
							class:list={[
								"link",
								{
									active:
										Astro.url.pathname === href ||
										(href !== "/" &&
											Astro.url.pathname.startsWith(
												href,
											)),
								},
							]}
							href={href}
						>
							{label}
						</a>
					</li>
				))
			}
		</ul>
	</noscript>
	<noscript>
		<div class="menu-footer">
			<div class="join-button">
				<a href="https://discord.gg/BzhUm6k4z7" target="_blank"
					>Join Us</a
				>
				<Icon icon="paper-plane-tilt" size="1.2em" color="white" />
			</div>
		</div>
	</noscript>
	<div id="menu-content" hidden>
		<ul class="nav-items">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a
							aria-current={Astro.url.pathname === href}
							class:list={[
								"link",
								{
									active:
										Astro.url.pathname === href ||
										(href !== "/" &&
											Astro.url.pathname.startsWith(
												href,
											)),
								},
							]}
							href={href}
						>
							{label}
						</a>
					</li>
				))
			}
		</ul>
		<div class="menu-footer">
			<div class="join-button">
				<a href="https://discord.gg/BzhUm6k4z7" target="_blank"
					>Join Us</a
				>
				<Icon icon="paper-plane-tilt" size="1.2em" color="white" />
			</div>
		</div>
	</div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(
				this.querySelector("template")!.content.cloneNode(true),
			);
			const btn = this.querySelector("button")!;

			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById("menu-content")!;
			menu.hidden = true;
			// Add "menu-content" class in JS to avoid covering content in non-JS browsers.
			menu.classList.add("menu-content");

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute("aria-expanded", expand ? "true" : "false");
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener("click", () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (
				e: MediaQueryList | MediaQueryListEvent,
			) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia("(min-width: 50em)");
			handleViewports(mediaQueries);
			mediaQueries.addEventListener("change", handleViewports);
		}
	}
	customElements.define("menu-button", MenuButton);
</script>

<style>
	nav {
		z-index: 9999;
		position: relative;
		font-family: var(--font-brand);
		font-weight: 500;
		margin-bottom: 1rem;
	}

	.menu-header {
		display: flex;
		justify-content: space-between;
		gap: 0.5rem;
		padding: 1.5rem;
	}

	.site-title {
		display: flex;
		gap: 0.5rem;
		align-items: center;
		line-height: 1.1;
		color: var(--gray-0);
		text-decoration: none;
	}

	.menu-button {
		position: relative;
		display: flex;
		border: 0;
		border-radius: 999rem;
		padding: 0.5rem;
		font-size: 1.5rem;
		color: var(--gray-300);
		background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
		box-shadow: var(--shadow-md);
	}

	.menu-button[aria-expanded="true"] {
		color: var(--gray-0);
		background: linear-gradient(180deg, var(--gray-600), transparent),
			radial-gradient(var(--gray-900), var(--gray-800) 150%);
	}

	.menu-button[hidden] {
		display: none;
	}

	.menu-button::before {
		position: absolute;
		inset: -1px;
		content: "";
		background: var(--gradient-stroke);
		border-radius: 999rem;
		z-index: -1;
	}

	.menu-content {
		position: absolute;
		left: 0;
		right: 0;
	}

	.nav-items {
		margin: 0;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		font-size: var(--text-md);
		line-height: 1.2;
		list-style: none;
		padding: 2rem;
		background-color: var(--gray-999);
	}

	.link {
		display: inline-block;
		color: var(--gray-300);
		text-decoration: none;
	}

	.link:hover,
	.link:focus {
		color: var(--gray-100);
	}

	.link.active {
		background: var(--gradient-accent);
		-webkit-background-clip: text;
		background-clip: text;
		color: transparent;
	}

	.menu-footer {
		--icon-size: var(--text-xl);
		--icon-padding: 0.5rem;

		display: flex;
		justify-content: space-between;
		gap: 0.75rem;
		padding: 1.5rem 2rem 1.5rem 1.5rem;
		background-color: var(--gray-999);
		border-radius: 0 0 0.75rem 0.75rem;
		box-shadow: var(--shadow-lg);
	}

	.join-button {
		display: flex;
		align-items: center;
		gap: 0.5em;
		height: calc(var(--icon-size) + 2 * var(--icon-padding));

		background: var(--gradient-accent);
		border-radius: 999rem;
		padding: 0.5em 1.5em;
	}

	.join-button a {
		text-decoration: none;
		color: white;
	}

	.join-button a::after {
		content: "";
		position: absolute;
		inset: 0;
		pointer-events: none;
		transition: background-color var(--theme-transition);
		mix-blend-mode: overlay;
	}

	.join-button a:focus::after,
	.join-button a:hover::after {
		background-color: hsla(var(--gray-999-basis), 0.3);
	}

	@media (min-width: 50em) {
		nav {
			display: grid;
			grid-template-columns: 1fr auto 1fr;
			align-items: center;
			padding: 1rem 3rem;
			gap: 1rem;
			border-bottom: 1px solid var(--gray-800);
			border-radius: 0.75rem;
			background-color: var(--gray-999_40);
			box-shadow: var(--shadow-sm);
		}

		.menu-header {
			padding: 0;
		}

		.site-title {
			font-size: var(--text-lg);
		}

		.menu-content {
			display: contents;
		}

		.nav-items {
			position: relative;
			flex-direction: row;
			font-size: var(--text-base);
			border: 0;
			padding: 0;
			background-color: transparent;
		}

		.link {
			padding: 0.5rem 1rem;
			border-radius: 999rem;
			transition:
				color var(--theme-transition),
				background-color var(--theme-transition);
		}

		.menu-footer {
			--icon-padding: 0.375rem;

			justify-self: flex-end;
			align-items: center;
			padding: 0;
			background-color: transparent;
			box-shadow: none;
		}
	}

	@media (forced-colors: active) {
		.link.active {
			color: SelectedItem;
		}
	}
</style>
